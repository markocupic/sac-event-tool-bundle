{% do addJavascriptResource('assets/contao-component-vue-js/vue/dist/vue.global.prod.js?3.3.4') %}
{% do addJavascriptResource(sacevt_asset_dir()~'/js/eventlist_vue.js') %}

<div id="tour-list" v-cloak>
    <span v-if="itemsTotal > 0" class="text-muted"><small>Zu deiner Suchanfrage wurden [[ itemsTotal ]] Events gefunden. </small></span>
    <span v-if="blnIsBusy === true" class="ms-2 text-success"><small>Lade events...</small></span>
    <div class="event-container row">
        <div v-for="(row, index) of rows" class="event-item event-item-tour event col-12 col-lg-6" data-aos="fade-down" data-aos-duration="600" data-aos-once="true" data-aos-anchor-placement="top-bottom" v-bind:data-id="row.id" v-bind:data-event-type="row.tourTypesIds">

            <div class="event-list-inner-box d-flex p-3 mb-3 bg-white border border-white">

                {# left col #}
                <div class="event-list-tour-col-1" data-has-event-href="true" v-bind:data-href="row.eventUrl">
                    <div class="event-list-date-badge-wrapper me-4 rounded-circle d-flex align-items-center justify-content-center">
                        <div class="d-flex flex-column">
                            <span class="event-list-badge-day text-center">
                                <span v-html="row.startDateDay"></span>
                            </span>
                            <span class="event-list-badge-month text-uppercase text-center">
                                <span v-html="row.startDateMonth"></span>
                            </span>
                        </div>
                    </div>
                    {# The logo will not be displayed if the event is organized by multiple groups. #}
                    <div class="event-organizer-logo mt-3">
                        <div v-if="row.eventOrganizerLogos.length === 1" v-html="row.eventOrganizerLogos[0]"></div>
                    </div>
                </div>
                {# end left col #}

                {# right col #}
                <div class="event-list-tour-col-2">
                    {# Event has been rescheduled #}
                    <div class="small text-danger me-1" v-if="row.eventState === 'event_status_6'">
                        <span class="small" v-html="row.eventStateLabel"></span>
                    </div>

                    {# row event period #}
                    <div class="d-flex flex-wrap">
                        <div class="small me-1"><span v-html="row.eventPeriodLgInline"></span></div>
                        <div class="small text-muted me-1">(Dauer: <span v-html="row.eventDuration"></span>)</div>
                    </div>
                    {# end row event period #}

                    {# row last minute event #}
                    <div class="last-minute-tour d-block small" v-if="row.eventType === 'lastMinuteTour'">
                        <i class="fa fa-clock"></i>
                        <span class="text-uppercase">last minute tour</span>
                    </div>
                    {# end row last minute event #}

                    {# row state icon #}
                    <div class="title d-flex my-2 align-items-start">
                        <span class="event-state-icon" v-html="row.eventStateIcon" data-bs-toggle="tooltip" data-placement="top" v-bind:aria-label="row.eventStateLabel" v-bind:data-title="row.eventStateLabel"></span>
                        <a v-bind:href="row.eventUrl" data-has-event-href="true" v-bind:data-href="row.eventUrl" class="event-title-link fw-bold"><strong>[[ row.eventTitle ]]</strong></a>
                    </div>
                    {# end row state icon #}

                    {# start row icons #}
                    <div class="d-flex flex-wrap badge-container">
                        <div class="d-flex flex-wrap" v-if="row.bookingCounter" v-html="row.bookingCounter"></div>
                        <div class="d-flex flex-wrap" v-if="row.suitableForBeginners">
                            <span class="badge badge-pill bg-warning" data-bs-toggle="tooltip" data-placement="top" data-title="FÃ¼r Einsteiger geeignet">
                                <i class="event-for-beginners"></i>
                            </span>
                        </div>
                        <div class="d-flex flex-wrap" v-if="row.tourTechDifficulties" v-html="row.tourTechDifficulties"></div>
                        <div class="d-flex flex-wrap" v-if="row.tourTypesShortcuts" v-html="row.tourTypesShortcuts"></div>
                        <div class="d-flex flex-wrap" v-if="row.isPublicTransportEvent" v-html="row.getPublicTransportBadge"></div>
                    </div>
                    {# end row icons #}

                    {# start row instructors #}
                    <div class="small text-muted" v-html="row.instructors"></div>
                    {# end row instructors #}

                </div>
                {# end right col #}
            </div>
        </div>
    </div>

    <div v-if="blnIsBusy === true">
        <div class="d-flex mt-4 justify-content-center">
            <div class="mt-3 mb-3"><i class="fas fa-5x text-secondary fa-rotate fa-spin"></i></div>
        </div>
        <div class="d-flex justify-content-center">
            <div class="mt-3 mb-3 text-secondary">... lade Events ...</div>
        </div>
    </div>

    <div v-if="blnIsBusy === false && blnAllEventsLoaded === false" v-on:click="prepareRequest()">
        <div class="d-flex justify-content-center">
            <button class="btn btn-lg btn-outline-primary mt-4 ps-5 pe-5">Weitere Events laden?</button>
        </div>
    </div>

    <div v-if="blnIsBusy === false && !itemsTotal" class="alert alert-info">
        Zu deiner Suchanfrage wurden leider keine Events gefunden.
    </div>
</div>

{# Set up the vue.js tour list #}
<script>
    window.addEventListener("DOMContentLoaded", (event) => {
        new VueTourList('#tour-list', {
            'modId': {{ id }},
            'apiParams': {
                'organizers': [{{ apiParam.organizers }}],
                'eventType': ['{{ apiParam.eventType }}'],
                'suitableForBeginners': '{{ apiParam.suitableForBeginners }}',
                'publicTransportEvent': '{{ apiParam.publicTransportEvent }}',
                'tourType': '{{ apiParam.tourType }}',
                'courseType': '{{ apiParam.courseType }}',
                'courseId': '{{ apiParam.courseId }}',
                'year': '{{ apiParam.year }}',
                'dateStart': '{{ apiParam.dateStart }}',
                'textSearch': '{{ apiParam.textSearch }}',
                'eventId': '{{ apiParam.eventId }}',
                'arrIds': [{{ apiParam.arrIds }}],
                'username': '{{ apiParam.username }}',
                'calendarIds': [{{ apiParam.calendarIds }}],
                'limit': '{{ apiParam.limit }}',
                'offset': '0',
            },
            'fields': [
                'id',
                'title',
                'startDateDay',
                'startDateMonth',
                'eventType',
                'eventTitle',
                'eventUrl',
                'instructors',
                'tourTypesShortcuts',
                'tourTechDifficulties',
                'bookingCounter',
                'eventState',
                'eventStateIcon',
                'eventStateLabel',
                'eventDuration',
                'eventPeriodLgInline',
                'tourTypesIds',
                'suitableForBeginners',
                'isPublicTransportEvent',
                'getPublicTransportBadge',
                'eventOrganizerLogos||50'
            ],
            'callbacks': {
                'oninsert': async function (vue, json) {

                    // Async await stack with auto invocation (See: https://gist.github.com/markocupic/0f49df91b8968ef471b78865707a43d2)
                    (async () => {

                        // Wait until DOM is ready
                        await (() => {
                            return new Promise(resolve => setTimeout(resolve, 100));
                        })();

                        await (() => {
                            return new Promise((resolve, reject) => {
                                const el = document.querySelectorAll(vue.elId + ' [data-bs-toggle="tooltip"]');
                                if (typeof el !== 'undefinded' && el.length > 0) {

                                    for (let i = 0; i < el.length; ++i) {
                                        let title = '';
                                        // Get the title attribute by default from the data-title attribute.
                                        // The reason why we are doing this:
                                        // Popper.js deletes the original title attribute when it has been initialized.
                                        if (el[i].hasAttribute('data-title')) {
                                            title = el[i].getAttribute('data-title');
                                            el[i].setAttribute('data-bs-title', title);
                                            el[i].setAttribute('title', title);
                                            el[i].setAttribute('data-bs-toggle', 'tooltip');
                                        } else if (el[i].hasAttribute('title')) { // Fallback
                                            title = el[i].getAttribute('title');
                                            el[i].setAttribute('data-bs-title', title);
                                            el[i].setAttribute('data-title', title);
                                            el[i].setAttribute('data-bs-toggle', 'tooltip');
                                        }
                                    }
                                }
                                resolve('Add the title- and data-bs-title attribute from the data-title attribute.');
                            });
                        })();

                        // Re-initialize Bootstrap/Popper.js tooltips
                        await (() => {
                            return new Promise((resolve, reject) => {

                                const tooltipTriggerList = [].slice.call(document.querySelectorAll(vue.elId + ' [data-bs-toggle="tooltip"]'))
                                tooltipTriggerList.map(function (tooltipTriggerEl) {
                                    return new bootstrap.Tooltip(tooltipTriggerEl);
                                });
                                resolve('Re-initialize Bootstrap popper.js tooltips.');
                            });
                        })();

                        // Re-initialize AOS
                        await (() => {
                            return new Promise((resolve, reject) => {
                                AOS.refresh();
                                resolve('Re-initialize AOS.');
                            });
                        })();

                        // Cache the event list object in the browsers local storage
                        // before we redirect to the detail page.
                        await (() => {
                            return new Promise((resolve, reject) => {
                                const buttons = document.querySelectorAll(vue.elId + ' [data-has-event-href="true"]');
                                for (const button of buttons) {
                                    button.addEventListener('click', (event) => {
                                        event.stopPropagation();
                                        event.preventDefault();
                                        const link = button.getAttribute('data-href');

                                        const eventBox = button.closest('.event-item');
                                        const eventId = eventBox.dataset.id;

                                        const url = new URL(window.location.href);
                                        const urlParams = new URLSearchParams(url.search);
                                        const href = window.location.protocol + '//' + window.location.hostname + window.location.pathname;

                                        if (urlParams.has('itemId')) {
                                            urlParams.set('itemId', eventId);
                                        } else {
                                            urlParams.append('itemId', eventId);
                                        }

                                        // Current URL: https://my-website.com/page_a.html?event=200
                                        const nextURL = href + '?' + urlParams.toString();
                                        const nextTitle = document.title; // keep the same title

                                        // This will create a new entry in the browser's history, without reloading.
                                        window.history.replaceState({}, nextTitle, nextURL);

                                        const vueInstance = {
                                            'rows': vue.rows,
                                            'arrEventIds': vue.arrEventIds,
                                            'itemsTotal': vue.itemsTotal,
                                            'loadedItems': vue.loadedItems,
                                            'blnAllEventsLoaded': vue.blnAllEventsLoaded,
                                            'expiry': Date.now() + 5 * 60 * 1000,
                                        }

                                        // Save the vue instance to the local storage.
                                        // That will prevent a time-consuming request,
                                        // if the user clicks back from the detail module to the listing module.
                                        const key = btoa(nextURL + '&modId=' + vue.modId);

                                        try {
                                            // @todo: try to distribute data on multiole keys
                                            localStorage.setItem(key, JSON.stringify(vueInstance));
                                        } catch (e) {
                                            console.error('Storage: Setting the value of ' + key + ' exceeded the quota.');
                                        }

                                        // Redirect to detail page
                                        window.location.href = link;
                                    });
                                }
                                resolve('Cached the event list object to the localStorage!');
                            });
                        })();
                    })();
                }
            }
        });
    });
</script>
