{% do addJavascriptResource('assets/contao-component-vue-js/vue/dist/vue.global.prod.js?3.3.4') %}
{% do addJavascriptResource(sacevt_asset_dir()~'/js/eventlist_vue.js|static') %}

<div id="course-list" v-cloak>
    <span v-if="itemsTotal > 0" class="text-muted mb-3"><small>Zu deiner Suchanfrage wurden [[ itemsTotal ]] Events gefunden. </small></span>
    <span v-if="blnIsBusy === true" class="ms-2 text-success"><small>Lade events...</small></span>
    <div class="event-container row g-3">

        <div v-for="(row, index) of rows" class="col-xs-12 col-md-6 event-item event-item-course event layout_upcoming" data-aos="fade-down" data-aos-duration="600" data-aos-once="true" data-aos-anchor-placement="top-bottom" v-bind:data-id="row.id" v-bind:data-event-type="row.courseTypeLevel1">
            <div class="course-list-inner-box bg-white">
                <div class="row gx-0">
                    <!-- Start left col -->
                    <div class="col-0 col-xl-5 d-none d-xl-block">
                        <div class="image-zoom-in">
                            <a v-bind:href="row.eventUrl" data-has-event-href="true" v-bind:data-href="row.eventUrl" v-bind:title="row.title" v-html="row.eventImage" class="responsive event-title-link"></a>
                        </div>
                    </div>
                    <!-- Start right col -->
                    <div class="col-12 col-xl-7 position-relative">
                        <div class="p-3">
                            <div class="title">
                                <a v-bind:href="row.eventUrl" data-has-event-href="true" v-bind:data-href="row.eventUrl" class="event-title-link lh-base">
                                    <h4 class="d-flex headline m-0 p-0 lh-base">
                                        <strong>[[ row.title ]]</strong>
                                    </h4>
                                </a>
                            </div>
                            <div class="detail-item small mb-3">
                                <strong><span class="small">[[ row.courseTypeLevel0Name ]]: [[ row.courseTypeLevel1Name ]]</span></strong>
                            </div>
                            <div class="detail-item small mb-2 d-flex align-items-start">
                                <i class="fa fa-fw fa-stairs mt-1 me-1"></i><span>Kursstufe: [[ row.courseLevelName ]]</span>
                            </div>
                            <div class="detail-item small mb-2 d-flex flex-wrap align-items-start">
                                <i class="fa fa-fw fa-calendar-alt mt-1 me-1"></i><span class="me-1 small" v-html="row.eventPeriodLgInline"></span><span class="text-muted" v-html="'(Dauer: ' + row.eventDuration + ')'"></span>
                            </div>
                            {# if the event has been rescheduled #}
                            <div class="detail-item small text-danger mb-2" v-if="row.eventState === 'event_status_6'">
                                <span v-html="row.eventStateLabel"></span>
                            </div>
                            <div class="detail-item small mb-2 d-flex align-items-start">
                                <i class="fa fa-fw fa-user mt-1 me-1"></i><span>Leitung: [[ row.instructorsWithQualification ]]</span>
                            </div>
                            <div class="detail-item d-flex flex-wrap mb-2">
                                <div class="event-state-icon me-1" v-html="row.eventStateIcon" data-bs-toggle="tooltip" data-placement="top" v-bind:aria-label="row.eventStateLabel" v-bind:data-title="row.eventStateLabel" v-bind:class="row.eventState"></div>
                                <div v-html="row.bookingCounter" class="me-1"></div>
                                <div v-if="row.isPublicTransportEvent" v-html="row.getPublicTransportBadge" class="me-1"></div>
                                <div class="more-btn"><a v-bind:href="row.eventUrl"><span class="badge badge-sm badge-pill">Zum Angebot</span></a></div>
                            </div>
                            {# The logo will not be displayed if the event is organized by multiple groups. #}
                            <div class="detail-item" v-if="row.eventOrganizerLogos.length === 1">
                                {# position absolute bottom right #}
                                <div class="event-organizer-logo position-absolute">
                                    <div v-html="row.eventOrganizerLogos[0]"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div v-if="blnIsBusy === true">
        <div class="d-flex mt-4 justify-content-center">
            <div mt-3 mb-3><i class="fas fa-5x text-secondary fa-rotate fa-spin"></i></div>
        </div>
        <div class="d-flex justify-content-center">
            <div class="mt-3 mb-3 text-secondary">... lade Events ...</div>
        </div>
    </div>

    <div v-if="blnIsBusy === false && blnAllEventsLoaded === false" v-on:click="prepareRequest()">
        <div class="d-flex justify-content-center">
            <button class="btn btn-lg btn-outline-primary mt-4 ps-5 pe-5">Weitere Events laden?</button>
        </div>
    </div>

    <div v-if="blnIsBusy === false && !itemsTotal" class="alert alert-info">
        Zu deiner Suchanfrage wurden leider keine Events gefunden.
    </div>
</div>

<!-- Set up the vue.js course list -->
<script>
    new VueTourList('#course-list', {
        'modId': {{ id }},
        'apiParams': {
            'organizers': [{{ apiParam.organizers }}],
            'eventType': ['{{ apiParam.eventType }}'],
            'publicTransportEvent': '{{ apiParam.publicTransportEvent }}',
            'tourType': '{{ apiParam.tourType }}',
            'courseType': '{{ apiParam.courseType }}',
            'courseId': '{{ apiParam.courseId }}',
            'year': '{{ apiParam.year }}',
            'dateStart': '{{ apiParam.dateStart }}',
            'textSearch': '{{ apiParam.textSearch }}',
            'eventId': '{{ apiParam.eventId }}',
            'arrIds': [{{ apiParam.arrIds }}],
            'username': '{{ apiParam.username }}',
            'calendarIds': [{{ apiParam.calendarIds }}],
            'limit': '{{ apiParam.limit }}',
            'offset': '0',
        },
        'fields': [
            'id',
            'title',
            'eventUrl',
            'courseTypeLevel1',
            'eventImage||{{ pictureId }}',
            'courseTypeLevel0Name',
            'courseTypeLevel1Name',
            'instructorsWithQualification',
            'eventPeriodLgInline',
            'bookingCounter',
            'eventStateLabel',
            'eventState',
            'eventStateIcon',
            'isPublicTransportEvent',
            'getPublicTransportBadge',
            'eventOrganizerLogos||50',
            'courseLevelName',
            'eventDuration',
        ],
        'callbacks': {
            'oninsert': async function (vue, json) {

                // Async await stack with auto invocation (See: https://gist.github.com/markocupic/0f49df91b8968ef471b78865707a43d2)
                (async () => {

                    // Wait until DOM is ready
                    await (() => {
                        return new Promise(resolve => setTimeout(resolve, 100));
                    })();

                    await (() => {
                        return new Promise((resolve, reject) => {
                            const el = document.querySelectorAll(vue.elId + ' [data-bs-toggle="tooltip"]');
                            if (typeof el !== 'undefinded' && el.length > 0) {

                                for (let i = 0; i < el.length; ++i) {
                                    let title = '';
                                    // Get the title attribute by default from the data-title attribute.
                                    // The reason why we are doing this:
                                    // Popper.js deletes the original title attribute when it has been initialized.
                                    if (el[i].hasAttribute('data-title')) {
                                        title = el[i].getAttribute('data-title');
                                        el[i].setAttribute('data-bs-title', title);
                                        el[i].setAttribute('title', title);
                                        el[i].setAttribute('data-bs-toggle', 'tooltip');
                                    } else if (el[i].hasAttribute('title')) { // Fallback
                                        title = el[i].getAttribute('title');
                                        el[i].setAttribute('data-bs-title', title);
                                        el[i].setAttribute('data-title', title);
                                        el[i].setAttribute('data-bs-toggle', 'tooltip');
                                    }
                                }
                            }
                            resolve('Add the title- and data-bs-title attribute from the data-title attribute.');
                        });
                    })();

                    // Re-initialize AOS
                    await (() => {
                        return new Promise((resolve, reject) => {
                            AOS.refresh();
                            resolve('Re-initialize AOS.');
                        });
                    })();

                    // Re-initialize Bootstrap/Popper.js tooltips
                    await (() => {
                        return new Promise((resolve, reject) => {

                            const tooltipTriggerList = [].slice.call(document.querySelectorAll(vue.elId + ' [data-bs-toggle="tooltip"]'))
                            tooltipTriggerList.map(function (tooltipTriggerEl) {
                                return new bootstrap.Tooltip(tooltipTriggerEl);
                            })
                            resolve('Re-initialize Bootstrap popper.js tooltips.');
                        });
                    })();

                    // Cache the event list object in the browsers local storage
                    // before we redirect to the detail page.
                    await (() => {
                        return new Promise((resolve, reject) => {
                            const buttons = document.querySelectorAll(vue.elId + ' [data-has-event-href="true"]');
                            for (const button of buttons) {
                                button.addEventListener('click', (event) => {
                                    event.stopPropagation();
                                    event.preventDefault();
                                    const link = button.getAttribute('data-href');

                                    const eventBox = button.closest('.event-item');
                                    const eventId = eventBox.dataset.id;

                                    const url = new URL(window.location.href);
                                    const urlParams = new URLSearchParams(url.search);
                                    const href = window.location.protocol + '//' + window.location.hostname + window.location.pathname;

                                    if (urlParams.has('itemId')) {
                                        urlParams.set('itemId', eventId);
                                    } else {
                                        urlParams.append('itemId', eventId);
                                    }

                                    // Current URL: https://my-website.com/page_a.html?event=200
                                    const nextURL = href + '?' + urlParams.toString();
                                    const nextTitle = document.title; // keep the same title

                                    // This will create a new entry in the browser's history, without reloading.
                                    window.history.replaceState({}, nextTitle, nextURL);

                                    const vueInstance = {
                                        'rows': vue.rows,
                                        'arrEventIds': vue.arrEventIds,
                                        'itemsTotal': vue.itemsTotal,
                                        'loadedItems': vue.loadedItems,
                                        'blnAllEventsLoaded': vue.blnAllEventsLoaded,
                                        'expiry': Date.now() + 5 * 60 * 1000,
                                    }

                                    // Save the vue instance to the local storage.
                                    // That will prevent a time-consuming request,
                                    // if the user clicks backs from the detail module to the listing module.
                                    const key = btoa(nextURL + '&modId=' + vue.modId);

                                    try {
                                        // @todo: try to distribute data on multiole keys
                                        localStorage.setItem(key, JSON.stringify(vueInstance));
                                    } catch (e) {
                                        console.error('Storage: Setting the value of ' + key + ' exceeded the quota.');
                                    }

                                    // Redirect to detail page
                                    window.location.href = link;
                                });
                            }
                            resolve('Cached the event list object to the localStorage!');
                        });
                    })();
                })();
            }
        }
    });
</script>
